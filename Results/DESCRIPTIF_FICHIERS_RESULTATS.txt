# simul_output_even_23052022 
----------------------------

¤ Donnees testees :
 
for discharged_thresh in np.linspace(22, 30, 3):  # 3
         for discharged_prop in np.linspace(0.2, 0.8, 4):  # 4
             for pick_up_threhs in np.linspace(15, 24, 4):  # 4
    			for charg_slot in [DAY_LENGTH//4, DAY_LENGTH // 3, DAY_LENGTH // 2, DAY_LENGTH, 2*DAY_LENGTH]

¤ Strategie utilisée : FirstChargingStategy

¤ Silly back_in_town

¤ Remarques : calcul de coût au moment de la redistribution --> pas pertinent




# simul_smart_back1_output
----------------------------

Grosse simulation de raph sur son back_in_town



# corect_cost 
--------------

results_list = []
id = 0
charging_lev = 80
pick_up_threhs = 21.0
discharged_thresh = 22.0
discharged_prop = 0.6
loc_nbr = 10
nbr_max_per_loc = 16
inputs_list = []
for charg_slot in [DAY_LENGTH//16, DAY_LENGTH//10, DAY_LENGTH//8, DAY_LENGTH//4, DAY_LENGTH//2, DAY_LENGTH]:


TEMPORAL_COST_PONDERATION = 4*2*143*4/(3*5)
INTER_ARRIVAL_FACTOR = 120 

else :
	nbr_found+=1
	cost_of_distribution -= time_ponderation * space_ponderation * unitary_cost

for i in range(0, MAP_SIZE, 10):
	for j in range(0, MAP_SIZE, 10):

COST_COMPUTATION_STEP = (3600 / TIME_STEP)

MIN_DISTANCE = MAP_SIZE//10

